EJECUTRA PROYECTO VUE -> npm run dev

------------------------------------

Single File Componets:

- Vue utiliza componentes para la creación de aplicaciones y sitios web.

 --> Un componente debe de tener la extensión .Vue
    Un componente usualmente tiene 2 propósitos: ser re-utilizado o separar la funcionalidad; si se cumplen ambas es aún mejor.

    <script>
        Lógica
    </script>

    <template>
        HTML
    </template>

    <style>
        CSS/SCSS
    </style>

------------------------------------


.vscode -> Nos muestra las extensiones para vue para instalar en visual.
nodemodules -> Nos muestra los archivos o dependencias instalas con npm instal (se borra la carpeta para pasar el proyecto y con el comando de 
    instalación se recupera por el archivo package.json).

public -> Se colocan imagenes 

src -> Funciones y más componentes
    assets -> podemos colocar imagenes 
    components ->  

App.vue -> Es el componente principal

main.js -> Tine importaciones para ejecutar el proyecto.

style.css -> Estilos iniciales del proyecto

index.html -> Es donde se carga el archivo vue

gitignore -> Protege para que no se suban archivos 

package-lock.json -> Son las dependencias de las dependencias

package.json -> Son las dependencias 

README.md -> Es para editar o personalizar tu proyecto

vite.config.js -> Configuración de vue

------------------------------------

API Styles

    Los componentes de Vue.js se pueden escribir en 2 APIS diferentes: Options API y Composition API
    Options API está disponible desde Vue.js 2 mientras que Composition API desde la versión 2.7 y es la recomendada para proyectos con Vue 3

Options API 

    Se define la lógica de un componente utilizando una sintaxis de objeto. 
    Algunos Devs con experiencia en lenguajes orientados a objetos encuentran esta forma más facil de aprender.

Composition API 

    Se definen los componentes utilizando Imports (Tanto para funciones de Vue con Librerias).
    Composition API tiene 2 funciones para reactividad: reactive y ref
    Si tienes experiencia con React esta forma puede resultar familiar en muchas cosas.


Cual API utilizar: 
    Composition API -> Permite tener código más re-utilizable y si el proyecto sera hecho en Vue

        Se coloca setup en el 
            <script setup>

            </script>
        
    Options API -> Es recomendable si tu proyecto utilizara pequeñas piezas de Vue o escenarios no tan complejos, tambien si prefieres el estilo orientado a objetos.

------------------------------------

State 

    Determina la situación actual de nuestra aplicación.
    El state o estado no es es siempre igual; tiende a cambiar en base a las interacciones del usuario (clicks, formularios, navegar en diferentes páginas).

    Vue.js tiene un par de funciones que nos permiten declararlo y sobre todo identificar cuando el state ha cambiado:
        -> ref y reactive, ambas se importan de vue, so diponibles con Composition API y una vez que el state cambie el DOM de tu aplicación se actualizará.

        --> reactive: siempre es un objeto, (ideal para agrupar datos).
        --> ref: trabja con tipos de datos como lo es arrays, booleans, strings.
    

------------------------------------
Directivas en vue.js 

    Influenciadas por AngularJS las directivas de Vue.js es lo que llevan a este framework a un nuevo nivel. 
    Las directivas en Vue.js siempre inician con v- y se colocan como atributos HTML. 

    v-text
    v-html 
    v-show
    v-if
    v-else
    v-else-if
    v-for
    v-on 
    v-bind
    v-model 
    v-slot 
    v-pre 
    v-once 
    v-memo 
    v-cloak 

------------------------------------
Props 
    Se utilizan para pasar información entre componentes; estos props pueden ser datos estáticos o reactivos.
    En caso de querer pasar fucniones se recomienda que sea por medio de un Component Event.
    Nunca deben modificar el state del componente hijo.

------------------------------------
Eventos 
    Todas las aplicaciones requieren ciertas interacciones por parte del usuario. 
    Presionar un botoón o link; llenar un formulario, son algunas de las acciones del DOM más comunes. 
    Hace muy sencillo interactuar con ciertos eventos con la directiva v-on:

    Tipos de eventos 
    Hay dos tipos de eventos: Inline Handlers y Method Handlers.


        Los Inline son tareas muy sencillas como cambiar a dark o light mode.
        Los Method Handlers son muy útiles cuando realizarás diferentes acciones como validar los datos de un formulario.

